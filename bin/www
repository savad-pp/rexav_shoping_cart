#!/usr/bin/env node

require('dotenv').config();
const http = require('http');

const { CONSTANTS } = require('../configs');
const { logger } = require('../utilities');
const app = require('../app');

function normalizePort(val) {
  const p = parseInt(val, 10);

  if (isNaN(p)) {
    return val;
  }

  if (p >= 0) {
    return p;
  }

  return false;
}

const port = normalizePort(CONSTANTS.APP.port || process.env.PORT);
app.set('port', port);

const server = http.createServer(app);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      logger.error({
        message: `${bind} requires elevated privileges`,
        level: 'error',
      });
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error({
        message: `${bind} is already in use`,
        level: 'error',
      });
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.info(`Server listening at ${bind} in ${CONSTANTS.APP.env} mode`);
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
